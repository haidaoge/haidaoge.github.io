<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[echarts自适应设置]]></title>
    <url>%2F2019%2F09%2F09%2Fecharts%2Fecharts%E8%87%AA%E9%80%82%E5%BA%94%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[echarts的容器设置了自适应 添加window.onresize=myCharts.resize在setOption之后 12345678910111213141516171819202122232425262728293031323334353637383940414243var worldMapContainer = document.getElementById(&apos;WorldMap&apos;);//用于使chart自适应高度和宽度,通过窗体高宽计算容器高宽var resizeWorldMapContainer = function () &#123; worldMapContainer.style.width = window.innerWidth+&apos;px&apos;; worldMapContainer.style.height = window.innerHeight+&apos;px&apos;;&#125;;//设置容器高宽resizeWorldMapContainer();// 基于准备好的dom，初始化echarts实例var myChart = echarts.init(worldMapContainer);// 指定图表的配置项和数据var option = &#123; title: &#123; text: &apos;ECharts 入门示例&apos; &#125;, tooltip: &#123;&#125;, legend: &#123; data:[&apos;销量&apos;], height: worldMapContainer.style.height, width: worldMapContainer.style.width &#125;, xAxis: &#123; data: [&quot;衬衫&quot;,&quot;羊毛衫&quot;,&quot;雪纺衫&quot;,&quot;裤子&quot;,&quot;高跟鞋&quot;,&quot;袜子&quot;] &#125;, yAxis: &#123;&#125;, series: [&#123; name: &apos;销量&apos;, type: &apos;bar&apos;, data: [5, 20, 36, 10, 10, 20] &#125;]&#125;;// 使用刚指定的配置项和数据显示图表。myChart.setOption(option);//用于使chart自适应高度和宽度window.onresize = function () &#123; //重置容器高宽 resizeWorldMapContainer(); myChart.resize();&#125;; 如果容器设置固定大小则需要 resizeWorldMapContainer()方法 如果容器本身就是自适应样式，则不需要resizeWorldMapContainer()方法]]></content>
      <categories>
        <category>Echarts</category>
      </categories>
      <tags>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[echarts设置柱状图交差显示]]></title>
    <url>%2F2019%2F09%2F09%2Fecharts%2Fecharts%E8%AE%BE%E7%BD%AE%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%BA%A4%E5%B7%AE%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[有时候柱状图要做达标率一览，即达标的是一个颜色未达标的另外一个颜色只要在series中的itemStyle中color中设置已颜色列表即可1234567891011121314151617181920212223242526var colorList = [];series : [ &#123; type:&apos;bar&apos;, name:&apos;巡河完成率&apos;, barWidth: &apos;40%&apos;, label: &#123; normal: &#123; show: true, position: &apos;inside&apos;, formatter: &apos;&#123;c&#125;%&apos; &#125; &#125;, itemStyle: &#123; normal:&#123; color: function(params) &#123; return colorList[params.dataIndex] &#125; &#125; &#125;, data: data &#125;]for(var i in option.series[0].data)&#123; colorList[i]=option.series[0].data[i]&gt;70 ? &apos;#F08080&apos; : &apos;#7EC0EE&apos;;&#125;; 完整方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283var colorList = [];var option = &#123; legend: &#123; bottom: &quot;12%&quot;, right: 5, orient: &apos;horizontal&apos;, selectedMode:false, textStyle: &#123; color: &apos;#000&apos; &#125;, data:[&apos;巡河完成率&apos;] &#125;, color: [&apos;#3398DB&apos;], tooltip : &#123; /* 坐标轴指示器，坐标轴触发有效*/ trigger: &apos;axis&apos;, axisPointer : &#123; type : &apos;shadow&apos; &#125;, formatter: function(params) &#123; var res = params[0]; return res.axisValue + &apos;&lt;/br&gt;&apos; + res.marker + res.seriesName + &apos;\t&apos; + res.value + &apos;%&apos;; &#125;, backgroundColor : &quot;rgba(255,255,255,1)&quot;, borderWidth: 1, borderColor: &apos;#3399ff&apos;, textStyle: &#123; color: &apos;#494949&apos; &#125;, shadowStyle: &#123; &#125; &#125;, grid: &#123; left: &apos;3%&apos;, bottom: &apos;50px&apos;, containLabel: true, height: &apos;450px&apos; &#125;, xAxis : [ &#123; type : &apos;category&apos;, data : [&apos;玄武区&apos;, &apos;秦淮区&apos;, &apos;鼓楼区&apos;, &apos;建邺区&apos;, &apos;栖霞区&apos;, &apos;雨花台区&apos;, &apos;浦口区&apos;,&apos;江宁区&apos;,&apos;六合区&apos;], axisTick: &#123; alignWithLabel: true &#125; &#125; ], yAxis : [ &#123; type : &apos;value&apos;, axisLabel: &#123; formatter: &apos;&#123;value&#125; %&apos; &#125; &#125; ], series : [ &#123; type:&apos;bar&apos;, name:&apos;巡河完成率&apos;, barWidth: &apos;40%&apos;, label: &#123; normal: &#123; show: true, position: &apos;inside&apos;, formatter: &apos;&#123;c&#125;%&apos; &#125; &#125;, itemStyle: &#123; normal:&#123; color: function(params) &#123; return colorList[params.dataIndex] &#125; &#125; &#125;, data: data &#125; ] &#125;;for(var i in option.series[0].data)&#123; colorList[i]=option.series[0].data[i]&gt;70 ? &apos;#F08080&apos; : &apos;#7EC0EE&apos;;&#125;;obj.setOption(option);]]></content>
      <categories>
        <category>Echarts</category>
      </categories>
      <tags>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在饼状图上面标注数据]]></title>
    <url>%2F2019%2F09%2F09%2Fecharts%2F%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A5%BC%E7%8A%B6%E5%9B%BE%E4%B8%8A%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[1.饼状图数据显示 数据直接显示方法在series中使用label，如下所示 12345678910label : &#123; normal : &#123; formatter: &apos;&#123;d&#125;%&apos;, position: &apos;inner&apos;, textStyle : &#123; fontWeight : &apos;normal&apos;, fontSize : 15 &#125; &#125;&#125;, 全部代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667function echartZms(obj)&#123; var option = &#123; tooltip : &#123; trigger: &apos;item&apos;, &#125;, legend: &#123; bottom: &quot;5%&quot;, left: &quot;20%&quot;, orient: &apos;horizontal&apos;, selectedMode:false, textStyle: &#123; color: &apos;#fff&apos; &#125;, data: [&apos;已启动&apos;,&apos;未启动&apos;] &#125;, series : [ &#123; type: &apos;pie&apos;, avoidLabelOverlap: false, hoverAnimation:false, /*关闭 hover 在扇区上的放大动画效果。*/ silent:true, radius : &apos;70%&apos;, center: [&apos;50%&apos;, &apos;42%&apos;], label : &#123; normal : &#123; formatter: &apos;&#123;d&#125;%&apos;, position: &apos;inner&apos;, textStyle : &#123; fontWeight : &apos;normal&apos;, fontSize : 15 &#125; &#125; &#125;, data:[&#123; value: 335, name:&apos;已启动&apos;, label:&#123; show:true, position:[20,20] &#125;, itemStyle: &#123; normal: &#123; color: &quot;#167bd7&quot; &#125; &#125; &#125;,&#123; value: 310, name:&apos;未启动&apos;, itemStyle: &#123; normal: &#123; color: &quot;#414d63&quot; &#125; &#125; &#125; ], /*itemStyle: &#123; emphasis: &#123; shadowBlur: 10, shadowOffsetX: 0, shadowColor: &apos;rgba(0, 0, 0, 0.5)&apos; &#125; &#125;*/ &#125; ] &#125;; obj.setOption(option);&#125;; 2.环形图数据显示 同样在series中使用lable 123456789101112131415161718label: &#123; normal: &#123; position: &apos;center&apos;, fontSize: 14, formatter: function(obj) &#123; var tit, data = obj.data; if(data.name == &apos;已启动&apos;)&#123; tit = data.value+&apos;%已启动\n\n\n\n&apos;; &#125;else if(data.name == &apos;已关闭&apos;)&#123; tit = data.value+&apos;%已关闭&apos;; &#125;else if(data.name == &apos;已故障&apos;)&#123; tit = &apos;\n\n\n\n&apos;+ data.value+&apos;%已故障&apos;; &#125;; return tit; &#125; &#125;&#125;, 全部代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475var option = &#123; tooltip: &#123; trigger: &apos;item&apos;, formatter: &quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot; &#125;, legend: &#123; bottom: &quot;5%&quot;, left: &quot;5%&quot;, orient: &apos;horizontal&apos;, selectedMode:false, textStyle: &#123; color: &apos;#fff&apos; &#125;, data:[&apos;已启动&apos;,&apos;已关闭&apos;,&apos;已故障&apos;] &#125;, series: [ &#123; type:&apos;pie&apos;, center: [&apos;50%&apos;, &apos;42%&apos;], radius: [&apos;50%&apos;, &apos;70%&apos;], avoidLabelOverlap: false, hoverAnimation:false, /*关闭 hover 在扇区上的放大动画效果。*/ cursor:&apos;default&apos;, /*鼠标悬浮时在图形元素上时鼠标的样式是什么。同 CSS 的 cursor。*/ silent:true, /*图形是否不响应和触发鼠标事件，默认为 false，即响应和触发鼠标事件。*/ label: &#123; normal: &#123; position: &apos;center&apos;, fontSize: 14, formatter: function(obj) &#123; var tit, data = obj.data; if(data.name == &apos;已启动&apos;)&#123; tit = data.value+&apos;%已启动\n\n\n\n&apos;; &#125;else if(data.name == &apos;已关闭&apos;)&#123; tit = data.value+&apos;%已关闭&apos;; &#125;else if(data.name == &apos;已故障&apos;)&#123; tit = &apos;\n\n\n\n&apos;+ data.value+&apos;%已故障&apos;; &#125;; return tit; &#125; &#125; &#125;, data:[ &#123; value: data[1], name:&apos;已启动&apos;, itemStyle: &#123; normal: &#123; color: &quot;#02fb01&quot; &#125; &#125; &#125;, &#123; value: data[0], name:&apos;已关闭&apos;, itemStyle: &#123; normal: &#123; color: &quot;#157ad2&quot; &#125; &#125; &#125;, &#123; value: data[2], name:&apos;已故障&apos;, itemStyle: &#123; normal: &#123; color: &quot;#d14f57&quot; &#125; &#125; &#125; ] &#125; ] &#125; obj.setOption(option);]]></content>
      <categories>
        <category>Echarts</category>
      </categories>
      <tags>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在饼状图上面标注数据]]></title>
    <url>%2F2019%2F09%2F09%2Fecharts%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[echarts提示框组件设置]]></title>
    <url>%2F2019%2F09%2F09%2Fecharts%2Fecharts%E6%8F%90%E7%A4%BA%E6%A1%86%E7%BB%84%E4%BB%B6%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[如何使用提示框(tooltip的设置)？以柱状图为例 柱状图提示框显示百分比 12345678910tooltip : &#123; trigger: &apos;axis&apos;, axisPointer : &#123; /* 坐标轴指示器，坐标轴触发有效*/ type : &apos;shadow&apos; /* 默认为直线，可选为：&apos;line&apos; | &apos;shadow&apos;*/ &#125;, formatter: function(params) &#123; var res = params[0]; return res.axisValue + &apos;&lt;/br&gt;&apos; + res.marker + res.seriesName + &apos;\t&apos; + res.value + &apos;%&apos;; &#125;&#125;, 自定义数据(文本)格式的重点是打断点查看formatter : function(params) { } 中到的params参数 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071var riverRateB = echarts.init(document.getElementById(&quot;riverRate&quot;));var option = &#123; legend: &#123; bottom: &quot;12%&quot;, right: 5, orient: &apos;horizontal&apos;, selectedMode:false, textStyle: &#123; color: &apos;#000&apos; &#125;, data:[&apos;巡河完成率&apos;] &#125;, color: [&apos;#3398DB&apos;], tooltip : &#123; trigger: &apos;axis&apos;, axisPointer : &#123; /* 坐标轴指示器，坐标轴触发有效*/ type : &apos;shadow&apos; /* 默认为直线，可选为：&apos;line&apos; | &apos;shadow&apos;*/ &#125;, formatter: function(params) &#123; var res = params[0]; return res.axisValue + &apos;&lt;/br&gt;&apos; + res.marker + res.seriesName + &apos;\t&apos; + res.value + &apos;%&apos;; &#125; &#125;, grid: &#123; left: &apos;3%&apos;, bottom: &apos;50px&apos;, containLabel: true, height: &apos;450px&apos; &#125;, xAxis : [ &#123; type : &apos;category&apos;, data : [&apos;玄武区&apos;, &apos;秦淮区&apos;, &apos;鼓楼区&apos;, &apos;建邺区&apos;, &apos;栖霞区&apos;, &apos;雨花台区&apos;, &apos;浦口区&apos;,&apos;江宁区&apos;,&apos;六合区&apos;], axisTick: &#123; alignWithLabel: true &#125; &#125; ], yAxis : [ &#123; type : &apos;value&apos;, axisLabel: &#123; formatter: &apos;&#123;value&#125; %&apos; &#125; &#125; ], series : [ &#123; type:&apos;bar&apos;, name:&apos;巡河完成率&apos;, barWidth: &apos;40%&apos;, label: &#123; normal: &#123; show: true, position: &apos;inside&apos;, formatter: &apos;&#123;c&#125;%&apos; &#125; &#125;, itemStyle: &#123; normal:&#123; color: &apos;#3399ff&apos; &#125; &#125;, data: data &#125; ]&#125;; riverRateB.setOption(option);]]></content>
      <categories>
        <category>Echarts</category>
      </categories>
      <tags>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git配置ssh]]></title>
    <url>%2F2019%2F09%2F08%2Fgit%2Fgit%E9%85%8D%E7%BD%AEssh%2F</url>
    <content type="text"><![CDATA[一. 在Linux或macOS上打开终端，或在Windows上打开Git Bash / WSL。二. 生成新的ED25519 SSH密钥对：1ssh-keygen -t ed25519 -C &quot;email@example.com&quot;或者，如果你想使用RSA：1ssh-keygen -o -t rsa -b 4096 -C &quot;email@example.com&quot; 该-C标志在键中添加注释，以防你有多个注释，并想知道哪个是哪个。这是可选的。 三. 接下来，系统将提示你输入文件路径以保存SSH密钥对。如果你还没有SSH密钥对且未生成部署密钥，请按下建议的路径 Enter。使用建议的路径通常允许SSH客户端自动使用SSH密钥对而无需其他配置。如果你已经拥有一个带有建议文件路径的SSH密钥对，则需要输入一个新的文件路径并声明该SSH密钥对将在你的~/.ssh/config文件中用于哪个主机密钥对。 四. 确定路径后，系统将提示你输入密码以保护新的SSH密钥对。这是使用密码的最佳做法，但这不是必需的，你可以通过按Enter两次跳过创建密码== 。在任何情况下，如果要添加或更改SSH密钥对的密码，可以使用以下-p标志：ssh-keygen -p -o -f 五. 温馨提示如果不想clone、拉取、提交时输入密码，那么生成密钥的时候就不要输入密码 原文如下 12345&lt;html&gt;&lt;div class=&quot;documentation md prepend-top-default&quot;&gt;&lt;h1 data-sourcepos=&quot;1:1-1:21&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-gitlab-and-ssh-keys&quot; class=&quot;anchor&quot; href=&quot;#gitlab-and-ssh-keys&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;GitLab and SSH keys&lt;/h1&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;3:1-6:64&quot; dir=&quot;auto&quot;&gt;Git is a distributed version control system, which means you can work locally&amp;#x000A;but you can also share or &quot;push&quot; your changes to other servers.&amp;#x000A;Before you can push your changes to a GitLab server&amp;#x000A;you need a secure communication channel for sharing information.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;8:1-9:75&quot; dir=&quot;auto&quot;&gt;The SSH protocol provides this security and allows you to authenticate to the&amp;#x000A;GitLab remote server without supplying your username or password each time.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;11:1-12:143&quot; dir=&quot;auto&quot;&gt;For a more detailed explanation of how the SSH protocol works, read&amp;#x000A;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;this nice tutorial by DigitalOcean&lt;/a&gt;.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;14:1-14:15&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-requirements&quot; class=&quot;anchor&quot; href=&quot;#requirements&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Requirements&lt;/h2&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;16:1-17:63&quot; dir=&quot;auto&quot;&gt;The only requirement is to have the OpenSSH client installed on your system. This&amp;#x000A;comes pre-installed on GNU/Linux and macOS, but not on Windows.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;19:1-20:9&quot; dir=&quot;auto&quot;&gt;Depending on your Windows version, there are different methods to work with&amp;#x000A;SSH keys.&lt;/p&gt;&amp;#x000A;&lt;h3 data-sourcepos=&quot;22:1-22:43&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-windows-10-windows-subsystem-for-linux&quot; class=&quot;anchor&quot; href=&quot;#windows-10-windows-subsystem-for-linux&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Windows 10: Windows Subsystem for Linux&lt;/h3&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;24:1-28:25&quot; dir=&quot;auto&quot;&gt;Starting with Windows 10, you can&amp;#x000A;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;install the Windows Subsystem for Linux (WSL)&lt;/a&gt;&amp;#x000A;where you can run Linux distributions directly on Windows, without the overhead&amp;#x000A;of a virtual machine. Once installed and set up, you&apos;ll have the Git and SSH&amp;#x000A;clients at your disposal.&lt;/p&gt;&amp;#x000A;&lt;h3 data-sourcepos=&quot;30:1-30:43&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-windows-10-81-and-7-git-for-windows&quot; class=&quot;anchor&quot; href=&quot;#windows-10-81-and-7-git-for-windows&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Windows 10, 8.1, and 7: Git for Windows&lt;/h3&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;32:1-35:77&quot; dir=&quot;auto&quot;&gt;The easiest way to install Git and the SSH client on Windows 8.1 and Windows 7&amp;#x000A;is &lt;a href=&quot;https://gitforwindows.org&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Git for Windows&lt;/a&gt;. It provides a Bash&amp;#x000A;emulation (Git Bash) used for running Git from the command line and the&amp;#x000A;&lt;code&gt;ssh-keygen&lt;/code&gt; command that is useful to create SSH keys as you&apos;ll learn below.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;37:1-42:140&quot; dir=&quot;auto&quot;&gt;NOTE: &lt;strong&gt;Alternative tools:&lt;/strong&gt;&amp;#x000A;Although not explored in this page, you can use some alternative tools.&amp;#x000A;&lt;a href=&quot;https://www.cygwin.com&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Cygwin&lt;/a&gt; is a large collection of GNU and open source&amp;#x000A;tools which provide functionality similar to a Unix distribution.&amp;#x000A;&lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;PuttyGen&lt;/a&gt;&amp;#x000A;provides a graphical user interface to &lt;a href=&quot;https://tartarus.org/~simon/putty-snapshots/htmldoc/Chapter8.html#pubkey-puttygen&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;create SSH keys&lt;/a&gt;.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;44:1-44:40&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-types-of-ssh-keys-and-which-to-choose&quot; class=&quot;anchor&quot; href=&quot;#types-of-ssh-keys-and-which-to-choose&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Types of SSH keys and which to choose&lt;/h2&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;46:1-50:40&quot; dir=&quot;auto&quot;&gt;GitLab supports RSA, DSA, ECDSA, and ED25519 keys. Their difference lies on&amp;#x000A;the signing algorithm, and some of them have advantages over the others. For&amp;#x000A;more information, you can read this&amp;#x000A;&lt;a href=&quot;https://wiki.archlinux.org/index.php/SSH_keys#Choosing_the_authentication_key_type&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;nice article on ArchWiki&lt;/a&gt;.&amp;#x000A;We&apos;ll focus on ED25519 and RSA and here.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;52:1-55:69&quot; dir=&quot;auto&quot;&gt;NOTE: &lt;strong&gt;Note:&lt;/strong&gt;&amp;#x000A;As an admin, you can &lt;a href=&quot;../security/ssh_keys_restrictions.md&quot;&gt;restrict which keys should be permitted and their minimum length&lt;/a&gt;.&amp;#x000A;By default, all keys are permitted, which is also the case for&amp;#x000A;&lt;a href=&quot;../user/gitlab_com/index.md#ssh-host-keys-fingerprints&quot;&gt;GitLab.com&lt;/a&gt;.&lt;/p&gt;&amp;#x000A;&lt;h3 data-sourcepos=&quot;57:1-57:20&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-ed25519-ssh-keys&quot; class=&quot;anchor&quot; href=&quot;#ed25519-ssh-keys&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;ED25519 SSH keys&lt;/h3&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;59:1-61:65&quot; dir=&quot;auto&quot;&gt;Following &lt;a href=&quot;https://linux-audit.com/using-ed25519-openssh-keys-instead-of-dsa-rsa-ecdsa/&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;best practices&lt;/a&gt;,&amp;#x000A;you should always favor &lt;a href=&quot;https://ed25519.cr.yp.to/&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;ED25519&lt;/a&gt; SSH keys, since they&amp;#x000A;are more secure and have better performance over the other types.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;63:1-66:41&quot; dir=&quot;auto&quot;&gt;ED25519 SSH keys were introduced in OpenSSH 6.5,&amp;#x000A;so any modern OS should include the option to create them.&amp;#x000A;If for any reason your OS or the GitLab instance you interact with doesn&apos;t&amp;#x000A;support ED25519, you can fallback to RSA.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;68:1-70:109&quot; dir=&quot;auto&quot;&gt;NOTE: &lt;strong&gt;Note:&lt;/strong&gt;&amp;#x000A;Omnibus does not ship with OpenSSH, so it uses the version on your GitLab server. If using&amp;#x000A;Omnibus, ensure the version of OpenSSH installed is version 6.5 or newer if you want to use ED25519 SSH keys.&lt;/p&gt;&amp;#x000A;&lt;h3 data-sourcepos=&quot;72:1-72:16&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-rsa-ssh-keys&quot; class=&quot;anchor&quot; href=&quot;#rsa-ssh-keys&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;RSA SSH keys&lt;/h3&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;74:1-76:31&quot; dir=&quot;auto&quot;&gt;RSA keys are the most common ones and therefore the most compatible with&amp;#x000A;servers that may have an old OpenSSH version. Use them if the GitLab server&amp;#x000A;doesn&apos;t work with ED25519 keys.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;78:1-80:8&quot; dir=&quot;auto&quot;&gt;The minimum key size is 1024 bits, defaulting to 2048. If you wish to generate a&amp;#x000A;stronger RSA key pair, specify the &lt;code&gt;-b&lt;/code&gt; flag with a higher bit value than the&amp;#x000A;default.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;82:1-86:14&quot; dir=&quot;auto&quot;&gt;The old, default password encoding for SSH private keys is&amp;#x000A;&lt;a href=&quot;https://latacora.singles/2018/08/03/the-default-openssh.html&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;insecure&lt;/a&gt;;&amp;#x000A;it&apos;s only a single round of an MD5 hash. Since OpenSSH version 6.5, you should&amp;#x000A;use the &lt;code&gt;-o&lt;/code&gt; option to &lt;code&gt;ssh-keygen&lt;/code&gt; to encode your private key in a new, more&amp;#x000A;secure format.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;88:1-90:19&quot; dir=&quot;auto&quot;&gt;If you already have an RSA SSH key pair to use with GitLab, consider upgrading it&amp;#x000A;to use the more secure password encryption format by using the following command&amp;#x000A;on the private key:&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.ssh/id_rsa&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;96:1-96:32&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-generating-a-new-ssh-key-pair&quot; class=&quot;anchor&quot; href=&quot;#generating-a-new-ssh-key-pair&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Generating a new SSH key pair&lt;/h2&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;98:1-99:66&quot; dir=&quot;auto&quot;&gt;Before creating an SSH key pair, make sure to understand the&amp;#x000A;&lt;a href=&quot;#types-of-ssh-keys-and-which-to-choose&quot;&gt;different types of keys&lt;/a&gt;.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;101:1-101:29&quot; dir=&quot;auto&quot;&gt;To create a new SSH key pair:&lt;/p&gt;&amp;#x000A;&lt;ol data-sourcepos=&quot;103:1-140:0&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;103:1-103:67&quot;&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;103:4-103:67&quot;&gt;Open a terminal on Linux or macOS, or Git Bash / WSL on Windows.&lt;/p&gt;&amp;#x000A;&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;104:1-118:0&quot;&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;104:4-104:39&quot;&gt;Generate a new ED25519 SSH key pair:&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ed25519 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;110:4-110:30&quot;&gt;Or, if you want to use RSA:&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;email@example.com&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;116:4-117:51&quot;&gt;The &lt;code&gt;-C&lt;/code&gt; flag adds a comment in the key in case you have multiple of them&amp;#x000A;and want to tell which is which. It is optional.&lt;/p&gt;&amp;#x000A;&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;119:1-128:0&quot;&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;119:4-123:74&quot;&gt;Next, you will be prompted to input a file path to save your SSH key pair to.&amp;#x000A;If you don&apos;t already have an SSH key pair and aren&apos;t generating a &lt;a href=&quot;#deploy-keys&quot;&gt;deploy key&lt;/a&gt;,&amp;#x000A;use the suggested path by pressing&amp;#x000A;&lt;kbd&gt;Enter&lt;/kbd&gt;. Using the suggested path will normally allow your SSH client&amp;#x000A;to automatically use the SSH key pair with no additional configuration.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;125:4-127:67&quot;&gt;If you already have an SSH key pair with the suggested file path, you will need&amp;#x000A;to input a new file path and &lt;a href=&quot;#working-with-non-default-ssh-key-pair-paths&quot;&gt;declare what host&lt;/a&gt;&amp;#x000A;this SSH key pair will be used for in your &lt;code&gt;~/.ssh/config&lt;/code&gt; file.&lt;/p&gt;&amp;#x000A;&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;129:1-140:0&quot;&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;129:4-132:26&quot;&gt;Once the path is decided, you will be prompted to input a password to&amp;#x000A;secure your new SSH key pair. It&apos;s a best practice to use a password,&amp;#x000A;but it&apos;s not required and you can skip creating it by pressing&amp;#x000A;&lt;kbd&gt;Enter&lt;/kbd&gt; twice.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;134:4-135:29&quot;&gt;If, in any case, you want to add or change the password of your SSH key pair,&amp;#x000A;you can use the &lt;code&gt;-p&lt;/code&gt; flag:&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight plaintext&quot; lang=&quot;plaintext&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt;ssh-keygen -p -o -f &amp;lt;keyname&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;/li&gt;&amp;#x000A;&lt;/ol&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;141:1-141:74&quot; dir=&quot;auto&quot;&gt;Now, it&apos;s time to add the newly created public key to your GitLab account.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;143:1-143:43&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-adding-an-ssh-key-to-your-gitlab-account&quot; class=&quot;anchor&quot; href=&quot;#adding-an-ssh-key-to-your-gitlab-account&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Adding an SSH key to your GitLab account&lt;/h2&gt;&amp;#x000A;&lt;ol data-sourcepos=&quot;145:1-182:0&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;145:1-171:0&quot;&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;145:4-146:38&quot;&gt;Copy your &lt;strong&gt;public&lt;/strong&gt; SSH key to the clipboard by using one of the commands below&amp;#x000A;depending on your Operating System:&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;148:4-148:13&quot;&gt;&lt;strong&gt;macOS:&lt;/strong&gt;&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;pbcopy &amp;lt; ~/.ssh/id_ed25519.pub&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;154:4-154:52&quot;&gt;&lt;strong&gt;WSL / GNU/Linux (requires the xclip package):&lt;/strong&gt;&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;xclip &lt;span class=&quot;nt&quot;&gt;-sel&lt;/span&gt; clip &amp;lt; ~/.ssh/id_ed25519.pub&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;160:4-160:27&quot;&gt;&lt;strong&gt;Git Bash on Windows:&lt;/strong&gt;&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.ssh/id_ed25519.pub | clip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;166:4-167:54&quot;&gt;You can also open the key in a graphical editor and copy it from there,&amp;#x000A;but be careful not to accidentally change anything.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;169:4-170:60&quot;&gt;NOTE: &lt;strong&gt;Note:&lt;/strong&gt;&amp;#x000A;If you opted to create an RSA key, the name might differ.&lt;/p&gt;&amp;#x000A;&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;172:1-182:0&quot;&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;172:4-172:57&quot;&gt;Add your &lt;strong&gt;public&lt;/strong&gt; SSH key to your GitLab account by:&lt;/p&gt;&amp;#x000A;&lt;ol data-sourcepos=&quot;173:4-178:0&quot;&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;173:4-173:80&quot;&gt;Clicking your avatar in the upper right corner and selecting &lt;strong&gt;Settings&lt;/strong&gt;.&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;174:4-176:120&quot;&gt;Navigating to &lt;strong&gt;SSH Keys&lt;/strong&gt; and pasting your &lt;strong&gt;public&lt;/strong&gt; key in the &lt;strong&gt;Key&lt;/strong&gt; field. If you:&amp;#x000A;&lt;ul data-sourcepos=&quot;175:7-176:120&quot;&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;175:7-175:80&quot;&gt;Created the key with a comment, this will appear in the &lt;strong&gt;Title&lt;/strong&gt; field.&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;176:7-176:120&quot;&gt;Created the key without a comment, give your key an identifiable title like &lt;em&gt;Work Laptop&lt;/em&gt; or &lt;em&gt;Home Workstation&lt;/em&gt;.&lt;/li&gt;&amp;#x000A;&lt;/ul&gt;&amp;#x000A;&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;177:4-178:0&quot;&gt;Click the &lt;strong&gt;Add key&lt;/strong&gt; button.&lt;/li&gt;&amp;#x000A;&lt;/ol&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;179:4-181:77&quot;&gt;NOTE: &lt;strong&gt;Note:&lt;/strong&gt;&amp;#x000A;If you manually copied your public SSH key make sure you copied the entire&amp;#x000A;key starting with &lt;code&gt;ssh-ed25519&lt;/code&gt; (or &lt;code&gt;ssh-rsa&lt;/code&gt;) and ending with your email.&lt;/p&gt;&amp;#x000A;&lt;/li&gt;&amp;#x000A;&lt;/ol&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;183:1-183:46&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-testing-that-everything-is-set-up-correctly&quot; class=&quot;anchor&quot; href=&quot;#testing-that-everything-is-set-up-correctly&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Testing that everything is set up correctly&lt;/h2&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;185:1-186:74&quot; dir=&quot;auto&quot;&gt;To test whether your SSH key was added correctly, run the following command in&amp;#x000A;your terminal (replacing &lt;code&gt;gitlab.com&lt;/code&gt; with your GitLab&apos;s instance domain):&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;ssh &lt;span class=&quot;nt&quot;&gt;-T&lt;/span&gt; git@gitlab.com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;192:1-195:26&quot; dir=&quot;auto&quot;&gt;The first time you connect to GitLab via SSH, you will be asked to verify the&amp;#x000A;authenticity of the GitLab host you are connecting to.&amp;#x000A;For example, when connecting to GitLab.com, answer &lt;code&gt;yes&lt;/code&gt; to add GitLab.com to&amp;#x000A;the list of trusted hosts:&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight plaintext&quot; lang=&quot;plaintext&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt;The authenticity of host &apos;gitlab.com (35.231.145.151)&apos; can&apos;t be established.&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC2&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt;ECDSA key fingerprint is SHA256:HbW3g8zUjNSksFbqTiUWPWg2Bq1x8xdGUrliXFzSnUw.&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC3&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt;Are you sure you want to continue connecting (yes/no)? yes&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC4&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt;Warning: Permanently added &apos;gitlab.com&apos; (ECDSA) to the list of known hosts.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;204:1-207:53&quot; dir=&quot;auto&quot;&gt;NOTE: &lt;strong&gt;Note:&lt;/strong&gt;&amp;#x000A;For GitLab.com, consult the&amp;#x000A;&lt;a href=&quot;../user/gitlab_com/index.md#ssh-host-keys-fingerprints&quot;&gt;SSH host keys fingerprints&lt;/a&gt;,&amp;#x000A;to make sure you&apos;re connecting to the correct server.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;209:1-211:68&quot; dir=&quot;auto&quot;&gt;Once added to the list of known hosts, you won&apos;t be asked to validate the&amp;#x000A;authenticity of GitLab&apos;s host again. Run the above command once more, and&amp;#x000A;you should only receive a &lt;em&gt;Welcome to GitLab, &lt;code&gt;@username&lt;/code&gt;!&lt;/em&gt; message.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;213:1-214:46&quot; dir=&quot;auto&quot;&gt;If the welcome message doesn&apos;t appear, run SSH&apos;s verbose mode by replacing &lt;code&gt;-T&lt;/code&gt;&amp;#x000A;with &lt;code&gt;-vvvT&lt;/code&gt; to understand where the error is.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;216:1-216:46&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-working-with-non-default-ssh-key-pair-paths&quot; class=&quot;anchor&quot; href=&quot;#working-with-non-default-ssh-key-pair-paths&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Working with non-default SSH key pair paths&lt;/h2&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;218:1-220:26&quot; dir=&quot;auto&quot;&gt;If you used a non-default file path for your GitLab SSH key pair,&amp;#x000A;you must configure your SSH client to find your GitLab private SSH key&amp;#x000A;for connections to GitLab.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;222:1-223:53&quot; dir=&quot;auto&quot;&gt;Open a terminal and use the following commands&amp;#x000A;(replacing &lt;code&gt;other_id_rsa&lt;/code&gt; with your private SSH key):&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ssh-agent &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC2&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;ssh-add ~/.ssh/other_id_rsa&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;230:1-233:44&quot; dir=&quot;auto&quot;&gt;To retain these settings, you&apos;ll need to save them to a configuration file.&amp;#x000A;For OpenSSH clients this is configured in the &lt;code&gt;~/.ssh/config&lt;/code&gt; file. In this&amp;#x000A;file you can set up configurations for multiple hosts, like GitLab.com, your&amp;#x000A;own GitLab instance, GitHub, Bitbucket, etc.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;235:1-235:66&quot; dir=&quot;auto&quot;&gt;Below are two example host configurations using their own SSH key:&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight conf&quot; lang=&quot;conf&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt;&lt;span class=&quot;c&quot;&gt;# GitLab.com&lt;/span&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC2&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gitlab&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC3&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt; &lt;span class=&quot;n&quot;&gt;Preferredauthentications&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publickey&lt;/span&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC4&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt; &lt;span class=&quot;n&quot;&gt;IdentityFile&lt;/span&gt; ~/.&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;gitlab_com_rsa&lt;/span&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC5&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC6&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Private GitLab instance&lt;/span&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC7&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gitlab&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;company&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC8&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt; &lt;span class=&quot;n&quot;&gt;Preferredauthentications&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publickey&lt;/span&gt;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC9&quot; class=&quot;line&quot; lang=&quot;conf&quot;&gt; &lt;span class=&quot;n&quot;&gt;IdentityFile&lt;/span&gt; ~/.&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;example_com_rsa&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;249:1-251:53&quot; dir=&quot;auto&quot;&gt;Public SSH keys need to be unique to GitLab, as they will bind to your account.&amp;#x000A;Your SSH key is the only identifier you&apos;ll have when pushing code via SSH,&amp;#x000A;that&apos;s why it needs to uniquely map to a single user.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;253:1-253:26&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-per-repository-ssh-keys&quot; class=&quot;anchor&quot; href=&quot;#per-repository-ssh-keys&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Per-repository SSH keys&lt;/h2&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;255:1-256:69&quot; dir=&quot;auto&quot;&gt;If you want to use different keys depending on the repository you are working&amp;#x000A;on, you can issue the following command while inside your repository:&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight shell&quot; lang=&quot;shell&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;shell&quot;&gt;git config core.sshCommand &lt;span class=&quot;s2&quot;&gt;&quot;ssh -o IdentitiesOnly=yes -i ~/.ssh/private-key-filename-for-this-repository -F /dev/null&quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;262:1-262:63&quot; dir=&quot;auto&quot;&gt;This will not use the SSH Agent and requires at least Git 2.10.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;264:1-264:14&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-deploy-keys&quot; class=&quot;anchor&quot; href=&quot;#deploy-keys&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Deploy keys&lt;/h2&gt;&amp;#x000A;&lt;h3 data-sourcepos=&quot;266:1-266:30&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-per-repository-deploy-keys&quot; class=&quot;anchor&quot; href=&quot;#per-repository-deploy-keys&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Per-repository deploy keys&lt;/h3&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;268:1-269:45&quot; dir=&quot;auto&quot;&gt;Deploy keys allow read-only or read-write (if enabled) access to one or&amp;#x000A;multiple projects with a single SSH key pair.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;271:1-273:19&quot; dir=&quot;auto&quot;&gt;This is really useful for cloning repositories to your Continuous&amp;#x000A;Integration (CI) server. By using deploy keys, you don&apos;t have to set up a&amp;#x000A;dummy user account.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;275:1-280:22&quot; dir=&quot;auto&quot;&gt;If you are a project maintainer or owner, you can add a deploy key in the&amp;#x000A;project&apos;s &lt;strong&gt;Settings &amp;gt; Repository&lt;/strong&gt; page by expanding the&amp;#x000A;&lt;strong&gt;Deploy Keys&lt;/strong&gt; section. Specify a title for the new&amp;#x000A;deploy key and paste a public SSH key. After this, the machine that uses&amp;#x000A;the corresponding private SSH key has read-only or read-write (if enabled)&amp;#x000A;access to the project.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;282:1-287:8&quot; dir=&quot;auto&quot;&gt;You can&apos;t add the same deploy key twice using the form.&amp;#x000A;If you want to add the same key to another project, please enable it in the&amp;#x000A;list that says &apos;Deploy keys from projects available to you&apos;. All the deploy&amp;#x000A;keys of all the projects you have access to are available. This project&amp;#x000A;access can happen through being a direct member of the project, or through&amp;#x000A;a group.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;289:1-290:8&quot; dir=&quot;auto&quot;&gt;Deploy keys can be shared between projects, you just need to add them to each&amp;#x000A;project.&lt;/p&gt;&amp;#x000A;&lt;h3 data-sourcepos=&quot;292:1-292:29&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-global-shared-deploy-keys&quot; class=&quot;anchor&quot; href=&quot;#global-shared-deploy-keys&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Global shared deploy keys&lt;/h3&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;294:1-295:66&quot; dir=&quot;auto&quot;&gt;Global Shared Deploy keys allow read-only or read-write (if enabled) access to&amp;#x000A;be configured on any repository in the entire GitLab installation.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;297:1-302:68&quot; dir=&quot;auto&quot;&gt;This is really useful for integrating repositories to secured, shared Continuous&amp;#x000A;Integration (CI) services or other shared services.&amp;#x000A;GitLab administrators can set up the Global Shared Deploy key in GitLab and&amp;#x000A;add the private key to any shared systems. Individual repositories opt into&amp;#x000A;exposing their repository using these keys when a project maintainers (or higher)&amp;#x000A;authorizes a Global Shared Deploy key to be used with their project.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;304:1-306:48&quot; dir=&quot;auto&quot;&gt;Global Shared Keys can provide greater security compared to Per-Project Deploy&amp;#x000A;Keys since an administrator of the target integrated system is the only one&amp;#x000A;who needs to know and configure the private key.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;308:1-316:17&quot; dir=&quot;auto&quot;&gt;GitLab administrators set up Global Deploy keys in the Admin area under the&amp;#x000A;section &lt;strong&gt;Deploy Keys&lt;/strong&gt;. Ensure keys have a meaningful title as that will be&amp;#x000A;the primary way for project maintainers and owners to identify the correct Global&amp;#x000A;Deploy key to add. For instance, if the key gives access to a SaaS CI instance,&amp;#x000A;use the name of that service in the key name if that is all it is used for.&amp;#x000A;When creating Global Shared Deploy keys, give some thought to the granularity&amp;#x000A;of keys - they could be of very narrow usage such as just a specific service or&amp;#x000A;of broader usage for something like &quot;Anywhere you need to give read access to&amp;#x000A;your repository&quot;.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;318:1-321:54&quot; dir=&quot;auto&quot;&gt;Once a GitLab administrator adds the Global Deployment key, project maintainers&amp;#x000A;and owners can add it in project&apos;s &lt;strong&gt;Settings &amp;gt; Repository&lt;/strong&gt; page by expanding the&amp;#x000A;&lt;strong&gt;Deploy Keys&lt;/strong&gt; section and clicking &lt;strong&gt;Enable&lt;/strong&gt; next to the appropriate key listed&amp;#x000A;under &lt;strong&gt;Public deploy keys available to any project&lt;/strong&gt;.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;323:1-325:54&quot; dir=&quot;auto&quot;&gt;NOTE: &lt;strong&gt;Note:&lt;/strong&gt;&amp;#x000A;The heading &lt;strong&gt;Public deploy keys available to any project&lt;/strong&gt; only appears&amp;#x000A;if there is at least one Global Deploy Key configured.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;327:1-331:55&quot; dir=&quot;auto&quot;&gt;CAUTION: &lt;strong&gt;Warning:&lt;/strong&gt;&amp;#x000A;Defining Global Deploy Keys does not expose any given repository via&amp;#x000A;the key until that repository adds the Global Deploy Key to their project.&amp;#x000A;In this way the Global Deploy Keys enable access by other systems, but do&amp;#x000A;not implicitly give any access just by setting them up.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;333:1-333:15&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-applications&quot; class=&quot;anchor&quot; href=&quot;#applications&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Applications&lt;/h2&gt;&amp;#x000A;&lt;h3 data-sourcepos=&quot;335:1-335:11&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-eclipse&quot; class=&quot;anchor&quot; href=&quot;#eclipse&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Eclipse&lt;/h3&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;337:1-337:162&quot; dir=&quot;auto&quot;&gt;If you are using &lt;a href=&quot;https://www.eclipse.org/egit/&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;EGit&lt;/a&gt;, you can &lt;a href=&quot;https://wiki.eclipse.org/EGit/User_Guide#Eclipse_SSH_Configuration&quot; rel=&quot;nofollow noreferrer noopener&quot; target=&quot;_blank&quot;&gt;add your SSH key to Eclipse&lt;/a&gt;.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;339:1-339:27&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-ssh-on-the-gitlab-server&quot; class=&quot;anchor&quot; href=&quot;#ssh-on-the-gitlab-server&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;SSH on the GitLab server&lt;/h2&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;341:1-344:18&quot; dir=&quot;auto&quot;&gt;GitLab integrates with the system-installed SSH daemon, designating a user&amp;#x000A;(typically named &lt;code&gt;git&lt;/code&gt;) through which all access requests are handled. Users&amp;#x000A;connecting to the GitLab server over SSH are identified by their SSH key instead&amp;#x000A;of their username.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;346:1-350:15&quot; dir=&quot;auto&quot;&gt;SSH &lt;em&gt;client&lt;/em&gt; operations performed on the GitLab server wil be executed as this&amp;#x000A;user. Although it is possible to modify the SSH configuration for this user to,&amp;#x000A;e.g., provide a private SSH key to authenticate these requests by, this practice&amp;#x000A;is &lt;strong&gt;not supported&lt;/strong&gt; and is strongly discouraged as it presents significant&amp;#x000A;security risks.&lt;/p&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;352:1-353:61&quot; dir=&quot;auto&quot;&gt;The GitLab check process includes a check for this condition, and will direct you&amp;#x000A;to this section if your server is configured like this, e.g.:&lt;/p&gt;&amp;#x000A;&lt;pre class=&quot;code highlight js-syntax-highlight plaintext&quot; lang=&quot;plaintext&quot; v-pre=&quot;true&quot;&gt;&lt;code&gt;&lt;span id=&quot;LC1&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt;$ gitlab-rake gitlab:check&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC2&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt;# ...&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC3&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt;Git user has default SSH configuration? ... no&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC4&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt; Try fixing it:&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC5&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt; mkdir ~/gitlab-check-backup-1504540051&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC6&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt; sudo mv /var/lib/git/.ssh/id_rsa ~/gitlab-check-backup-1504540051&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC7&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt; sudo mv /var/lib/git/.ssh/id_rsa.pub ~/gitlab-check-backup-1504540051&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC8&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt; For more information see:&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC9&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt; doc/ssh/README.md in section &quot;SSH on the GitLab server&quot;&lt;/span&gt;&amp;#x000A;&lt;span id=&quot;LC10&quot; class=&quot;line&quot; lang=&quot;plaintext&quot;&gt; Please fix the error above and rerun the checks.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;368:1-369:64&quot; dir=&quot;auto&quot;&gt;Remove the custom configuration as soon as you&apos;re able to. These customizations&amp;#x000A;are &lt;em&gt;explicitly not supported&lt;/em&gt; and may stop working at any time.&lt;/p&gt;&amp;#x000A;&lt;h2 data-sourcepos=&quot;371:1-371:18&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;a id=&quot;user-content-troubleshooting&quot; class=&quot;anchor&quot; href=&quot;#troubleshooting&quot; aria-hidden=&quot;true&quot;&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;&amp;#x000A;&lt;p data-sourcepos=&quot;373:1-374:39&quot; dir=&quot;auto&quot;&gt;If on Git clone you are prompted for a password like &lt;code&gt;git@gitlab.com&apos;s password:&lt;/code&gt;&amp;#x000A;something is wrong with your SSH setup.&lt;/p&gt;&amp;#x000A;&lt;ul data-sourcepos=&quot;376:1-381:51&quot; dir=&quot;auto&quot;&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;376:1-377:28&quot;&gt;Ensure that you generated your SSH key pair correctly and added the public SSH&amp;#x000A;key to your GitLab profile&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;378:1-379:26&quot;&gt;Try manually registering your private SSH key using &lt;code&gt;ssh-agent&lt;/code&gt; as documented&amp;#x000A;earlier in this document&lt;/li&gt;&amp;#x000A;&lt;li data-sourcepos=&quot;380:1-381:51&quot;&gt;Try to debug the connection by running &lt;code&gt;ssh -Tv git@example.com&lt;/code&gt;&amp;#x000A;(replacing &lt;code&gt;example.com&lt;/code&gt; with your GitLab domain)&lt;/li&gt;&amp;#x000A;&lt;/ul&gt;&lt;/div&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git推送本地项目到远程]]></title>
    <url>%2F2019%2F09%2F08%2Fgit%2Fgit%E6%8E%A8%E9%80%81%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%88%B0%E8%BF%9C%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[git推送本地项目到远程 在github新建一个分支项目名与本地项目名相同 在本地项目根目录下初始化一个仓库 1git init 将本地工程代码提交，git会为你在本地默认创建一个master分支： 12git add .git commit -m &quot;init project&quot; 将本地仓库关联远程仓库： 1git remote add origin &lt;GitHub项目地址&gt; 将本地代码推送到远程： 1git push -u origin master 这一步很可能会提示错误：fatal: refusing to merge unrelated histories 这是因为我们没有关联远程分枝master，需要使用操作： 1git pull origin master --allow-unrelated-histories 来允许pull未关联的历史记录。 最后推送代码到远程master分支： 1git push -u origin master 可能遇到的问题 error: RPC failed; curl 52 Empty reply from server 方法： git fetch origin –prune]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 常用命令]]></title>
    <url>%2F2019%2F09%2F08%2Fgit%2Fgit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[提交一个文件夹下所有的文件 git add ‘文件夹’ git commit -m ‘描述’ git push –all 新建分支git branch ‘分支名’切换分支git checkout ‘分支名’新建并切换分支git checkout -b ‘分支名’拉取git pull 合并分支git merge ‘被合并的分支’ 删除本地分支git branch -d ‘分支名’ 删除远程分支git push origin [空格] [冒号] [需要删除的分支名字] eg: 删除远程中名为dev的分支 ==git push origin :dev== 回退到上一个版本git reset –hard HEAD^ 回退到指定版本git reset –hard 版本号(commit_id) 用git log可以查看提交历史，以便确定要回退到哪个版本。用git reflog查看命令历史，以便确定要回到未来的哪个版本。历史提交的记录git log –pretty=oneline –abbrev-commit git 推送某个分支到远程git push origin ‘分支名’ eg: 在dev上开发，推送到develop上 1234567git checkout dev......git add &apos;单个或多个修改&apos;git commit -m &apos;描述&apos;git checkout developgit merge --no-ff devgit push origin develop 本地有两个分支一个是develop一个是dev，在dev做了修改，执行add，commit，然切换分支到develop，执行merge到develop，最后push到远程，支持批操作 将远程git仓库里的指定分支拉取到本地（本地不存在的分支）git checkout -b 本地分支名 origin/远程分支名 stash储存用于将不想提交的文件暂存起来保存工作空间 git stash 查看所有暂存 git stash lish stash内容并不删除，你需要用git stash drop来删除； git stash apply git修改最近一次提交并且没有push到远程分支的message git commit –amend -m ‘修改的信息’ git commit –amend // 进入编辑模式， :w 或 按insert 键进行编辑，del键删除，esc键退出，:q 退出编辑界面 git 撤销上次commit git reset HEAD~]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git忽略规则及.gitignore规则不生效的解决办法]]></title>
    <url>%2F2019%2F09%2F08%2Fgit%2Fgit%E5%BF%BD%E7%95%A5%E8%A7%84%E5%88%99%E5%8F%8A.gitignore%E8%A7%84%E5%88%99%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[git忽略规则及.gitignore规则不生效的解决办法在git中如果想忽略掉某个文件，不让这个文件提交到版本库中，可以使用修改根目录中 .gitignore 文件的方法（如无，则需自己手工建立此文件）。这个文件每一行保存了一个匹配的规则。例如：1234567# 此为注释 – 将被 Git 忽略 *.a # 忽略所有 .a 结尾的文件!lib.a# 但 lib.a 除外/TODO # 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODObuild/# 忽略 build/ 目录下的所有文件doc/*.txt # 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 规则很简单，不做过多解释，但是有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交： 123git rm -r --cached .git add .git commit -m &apos;update .gitignore ```]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git 创建回退到某个节点的新分支]]></title>
    <url>%2F2019%2F09%2F08%2Fgit%2Fgit%20%E5%88%9B%E5%BB%BA%E5%9B%9E%E9%80%80%E5%88%B0%E6%9F%90%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E6%96%B0%E5%88%86%E6%94%AF%2F</url>
    <content type="text"><![CDATA[git 创建回退到某个节点的新分支123456789101112// 1.新建一个临时分支git checkout -b temp// 2.在临时分支上回退到某个版本git reset --hard &lt;版本号&gt;// 3.创建想要到分支名git checkout -b &lt;分支名&gt;// 4.将新建分支推送到远程仓库git push origin &lt;分支名&gt;]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 常用命令]]></title>
    <url>%2F2019%2F09%2F08%2Flinux%2Flinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[linux 编辑保存文件命令123456789101112131415161718191、vi 和 vim 的两种工作模式命令模式：打开一个文件后的默认模式编辑模式：打开的文件键盘输入&quot;i&quot; 进入插入编辑模式，进行增删改操作的一个模式。2、键盘输入&quot;i&quot;进入编辑模式后，就可以进行编写文件了编写完怎么保存文件呢？1）先按“esc”键 退出编辑模式，切换到命令模式，然后输入以下命令就可以这些操作要保证是在命令模式下进行。2）保存并退出文件：&quot;:wq&quot;3) 如果只想保存文件 ：&quot;:w&quot;4）放弃所有文件修改：&quot;:q!&quot; 修改文件夹名1mv files1 files2 // 将files1重命名为files2 删除文件和文件夹12345678rm -rf 文件夹名 //删除文件夹 /** -r 就是向下递归，不管有多少级目录，一并删除 -f 就是直接强行删除，不作任何提示的意思*/rm -f 文件名 // 删除文件 回到根目录1cd ~]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
